#!/usr/bin/env python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio
import subprocess

layouts = [
    { 'id':'manjaro', 'label':'Manjaro', 'x':1, 'y':0},
    { 'id':'win', 'label':'Windows', 'x':2, 'y':0},
    { 'id':'mac', 'label':'MacOs', 'x':1, 'y':3},
    { 'id':'gnome', 'label':'Gnome', 'x':2, 'y':3},
]


class HeaderBarWindow(Gtk.Window):
        
    def __init__(self):
        self.layout = 'manjaro'
        Gtk.Window.__init__(self, title="Gnome Layout Switcher")
        self.set_border_width(10)
        # self.set_default_size(300, 300)

        hb = Gtk.HeaderBar()
        hb.set_show_close_button(True)
        hb.props.title = "Layout Switcher"
        self.set_titlebar(hb)
        
        vbox = Gtk.Grid(row_homogeneous=False, column_homogeneous=False, row_spacing=10)
        self.add(vbox)
        # Stack settings
        stack = Gtk.Stack()
        stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        stack.set_transition_duration(300)
        stack.set_hhomogeneous(False)
        stack.set_vhomogeneous(False)
        stack.set_vexpand(True)

        # Radiomenu
        radiobox = Gtk.Grid(column_spacing=45, row_spacing=15, margin_left=40, margin_right=40, margin_bottom=30, margin_top=10)
        radiobox.set_hexpand(True)
        radiobox.props.halign = Gtk.Align.CENTER
        self.btn_layout_first = None
        for layout in layouts:
            self.create_layout_btn(layout=layout , the_grid=radiobox)

        stack.add_titled(radiobox, "radiobox", "Layout")
        stack_switcher = Gtk.StackSwitcher()
        stack_switcher.set_stack(stack)
        stack_switcher.set_hexpand(True)
        stack_switcher.props.halign = Gtk.Align.CENTER

        # The theme tab
        label = Gtk.Label()
        label.set_markup("<big>\n\nTheme settings\n\n\n</big>")
        stack.add_titled(label, "label", "Theme")

        # A button to apply the settings
        applybutton = Gtk.Button.new_with_label("Apply")
        applybutton.connect("clicked", self.on_click_me_clicked)
        # Pack everything to a box
        vbox.attach(stack_switcher, 1, 0, 1, 1)
        vbox.attach(stack,  1, 1, 1, 3)
        vbox.attach(applybutton, 1, 4, 1, 1)
    # Create the desktop grid
    def create_layout_btn(self, layout, the_grid):
        btn = Gtk.RadioButton.new_with_label_from_widget(self.btn_layout_first, layout['label'])
        if not self.btn_layout_first:
            self.btn_layout_first = btn
        btn.connect("toggled", self.on_button_toggled, layout['id'])
        the_grid.attach(btn, layout['x'], layout['y'], 1, 1)
        preview_img = Gtk.Image()
        preview_img.set_from_file(f"/usr/share/gls/pictures/{layout['id']}preview.png")
        btn.image = preview_img  # link img to checkbox for easy find
        if btn.get_active():
            preview_img.set_opacity(1)
        else:
            preview_img.set_opacity(0.65)
        event_img = Gtk.EventBox()
        event_img.connect("button-release-event",self.on_click_img)  # click in box
        event_img.add(preview_img)    # add img in box
        event_img.btn = btn    # link btn to box for easy find
        the_grid.attach(event_img, layout['x'], layout['y']+1, 1, 1) # add box and not img in grid

    def on_button_toggled(self, button, name):
        state = 0.45
        if button.get_active():
            state = 1
            self.layout = name
            print('active layout:', self.layout)

        button.image.set_opacity(state)    # change img opacity from state
        print("Button", name, "was turned", state == 1)
    # Make images clickable
    def on_click_img(self, box, event):
        box.btn.set_active(True) # change checkbox state and call on_button_toggled()


    def on_click_me_clicked(self, button):
        print("\"Apply\" button was clicked")
        layout = self.layout
        print(layout)
        if layout == 'manjaro':
            cmds=['gsettings set org.gnome.shell enabled-extensions "[\'dash-to-dock@micxgx.gmail.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'drive-menu@gnome-shell-extensions.gcampax.github.com\', \'appindicatorsupport@rgcjonas.gmail.com\', \'pamac-updates@manjaro.org\', \'arc-menu@linxgem33.com\']"',
                ['gsettings set org.gnome.shell.extensions.dash-to-dock dock-position LEFT'],
                ['gsettings set org.gnome.shell.extensions.dash-to-dock extend-height true'],
                ['gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed true'],
                ['gsettings set org.gnome.shell.extensions.arc-menu menu-button-text "Custom_Text"'],
                ['gsettings set org.gnome.shell.extensions.arc-menu custom-menu-button-text " Menu"']]
        elif layout == 'win':
            cmds=['gsettings set org.gnome.shell enabled-extensions "[\'dash-to-panel@jderose9.github.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'appindicatorsupport@rgcjonas.gmail.com\', \'pamac-updates@manjaro.org\', \'arc-menu@linxgem33.com\']"',
        'echo foo']
        elif layout == 'mac':
            cmds=['gsettings set org.gnome.shell enabled-extensions "[\'dash-to-dock@micxgx.gmail.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'appindicatorsupport@rgcjonas.gmail.com\', \'pamac-updates@manjaro.org\']"',
                ['gsettings set org.gnome.shell.extensions.dash-to-dock dock-position BOTTOM'],
                ['gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false'],
                ['gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed false'],
                ['gsettings set org.gnome.shell.extensions.arc-menu menu-button-text "Custom_Text"'],
                ['gsettings set org.gnome.shell.extensions.arc-menu custom-menu-button-text " "']]
        elif layout == 'gnome':
            cmds=['gsettings set org.gnome.shell enabled-extensions "[\'pamac-updates@manjaro.org\', \'user-theme@gnome-shell-extensions.gcampax.github.com\']"',
        'echo foo']
        for cmd in cmds:
            subprocess.run(cmd, shell=True)



# Show the window        
win = HeaderBarWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()