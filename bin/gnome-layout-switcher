#!/usr/bin/env python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio
import subprocess

layout = 'gnome'

def set_layout():
    if layout == 'manjaro':
        cmds=['gsettings set org.gnome.shell enabled-extensions "[\'dash-to-dock@micxgx.gmail.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'drive-menu@gnome-shell-extensions.gcampax.github.com\', \'appindicatorsupport@rgcjonas.gmail.com\', \'pamac-updates@manjaro.org\']"',
    'echo foo']
    elif layout == 'win':
        cmds=['gsettings set org.gnome.shell enabled-extensions "[\'dash-to-panel@jderose9.github.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'appindicatorsupport@rgcjonas.gmail.com\', \'pamac-updates@manjaro.org\', \'arc-menu@linxgem33.com\']"',
    'echo foo']
    elif layout == 'mac':
        cmds=['gsettings set org.gnome.shell enabled-extensions "[\'dash-to-dock@micxgx.gmail.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'appindicatorsupport@rgcjonas.gmail.com\', \'pamac-updates@manjaro.org\']"',
    'echo foo']
    elif layout == 'gnome':
        cmds=['gsettings set org.gnome.shell enabled-extensions "[\'pamac-updates@manjaro.org\', \'user-theme@gnome-shell-extensions.gcampax.github.com\']"',
    'echo foo']

    for cmd in cmds:
        subprocess.run(cmd, shell=True)
class HeaderBarWindow(Gtk.Window):
        
    def __init__(self):
        Gtk.Window.__init__(self, title="Gnome Layout Switcher")
        self.set_border_width(10)
        # self.set_default_size(300, 300)

        hb = Gtk.HeaderBar()
        hb.set_show_close_button(True)
        hb.props.title = "Layout Switcher"
        self.set_titlebar(hb)
        
        vbox = Gtk.Grid(row_homogeneous=False, column_homogeneous=False, row_spacing=10)
        self.add(vbox)
        # Stack settings
        stack = Gtk.Stack()
        stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        stack.set_transition_duration(300)
        stack.set_hhomogeneous(False)
        stack.set_vhomogeneous(False)
        stack.set_vexpand(True)

        # Radiomenu
        radiobox = Gtk.Grid(column_spacing=45, row_spacing=15, margin_left=40, margin_right=40, margin_bottom=30, margin_top=10)
        radiobox.set_hexpand(True)

        button1 = Gtk.RadioButton.new_with_label_from_widget(None, "Manjaro Layout")
        button1.connect("toggled", self.on_button_toggled, "manjaro")
        radiobox.attach(button1, 1, 0, 1, 1)
        preview_manjaro = Gtk.Image()
        preview_manjaro.set_from_file('/home/manj/git/lab/gnome-layout-switcher/data/pictures/manjaropreview.png')
        radiobox.attach(preview_manjaro, 1, 1, 1, 1)

        button2 = Gtk.RadioButton.new_from_widget(button1)
        button2.set_label("Windows Layout")
        button2.connect("toggled", self.on_button_toggled, "win")
        radiobox.attach(button2, 2, 0, 1, 1)
        preview_win = Gtk.Image()
        preview_win.set_from_file('/home/manj/git/lab/gnome-layout-switcher/data/pictures/winpreview.png')
        radiobox.attach(preview_win, 2, 1, 1, 1)

        button3 = Gtk.RadioButton.new_from_widget(button1)
        button3.set_label("MacOs Layout")
        button3.connect("toggled", self.on_button_toggled, "mac")
        radiobox.attach(button3, 1, 3, 1, 1)
        preview_mac = Gtk.Image()
        preview_mac.set_from_file('/home/manj/git/lab/gnome-layout-switcher/data/pictures/macpreview.png')
        radiobox.attach(preview_mac, 1, 4, 1, 1)

        button4 = Gtk.RadioButton.new_from_widget(button1)
        button4.set_label("Gnome Layout")
        button4.connect("toggled", self.on_button_toggled, "gnome")
        radiobox.attach(button4, 2, 3, 1, 1)
        preview_gnome = Gtk.Image()
        preview_gnome.set_from_file('/home/manj/git/lab/gnome-layout-switcher/data/pictures/gnomepreview.png')
        radiobox.attach(preview_gnome, 2, 4, 1, 1)
        radiobox.props.halign = Gtk.Align.CENTER

        stack.add_titled(radiobox, "radiobox", "Layout")
        stack_switcher = Gtk.StackSwitcher()
        stack_switcher.set_stack(stack)
        stack_switcher.set_hexpand(True)
        stack_switcher.props.halign = Gtk.Align.CENTER

        # The theme tab
        label = Gtk.Label()
        label.set_markup("<big>\n\nTheme setings\n\n\n</big>")
        stack.add_titled(label, "label", "Theme")

        # Preview images

        # A button to apply the settings
        applybutton = Gtk.Button.new_with_label("Apply")
        applybutton.connect("clicked", self.on_click_me_clicked)
        # Pack everything to a box
        vbox.attach(stack_switcher, 1, 0, 1, 1)
        vbox.attach(stack,  1, 1, 1, 3)
        vbox.attach(applybutton, 1, 4, 1, 1)

    # Placeholder functions for buttons
    def on_button_toggled(self, button, name):
        if button.get_active():
            state = "on"
            layout = name
            print(layout)
        else:
            state = "off"
        print("Button", name, "was turned", state)

    def on_click_me_clicked(self, button):
        print("\"Apply\" button was clicked")
        set_layout()


# Show the window        
win = HeaderBarWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
