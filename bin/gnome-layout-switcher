#!/usr/bin/env python3
import sys
import os
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio, Gdk
import subprocess
from shutil import copyfile
from pathlib import Path
import re

# Define the path to css file
css_file = Path('~/.config/gtk-3.0/gtk.css').expanduser()

class Opacity:
    TOP = 1
    MIDDLE = 0.70
    LOW = 0.45

layouts = [
    { 'id':'manjaro', 'label':'Manjaro', 'x':1, 'y':0},
    { 'id':'win', 'label':'Windows', 'x':2, 'y':0},
    { 'id':'mac', 'label':'MacOs', 'x':1, 'y':3},
    { 'id':'gnome', 'label':'Gnome', 'x':2, 'y':3},
]

def rm_brand():
    commands = ['pamac-installer --remove manjaro-gnome-assets manjaro-gdm-branding',
    'grep -q \'@define-color theme_selected_bg_color\' ~/.config/gtk-3.0/gtk.css && mv ~/.config/gtk-3.0/gtk.css ~/.config/gtk-3.0/gtk.css.bak']
    for cmd in commands:
        subprocess.run(cmd, shell=True)

def rebrand():
    commands = ['pamac-installer manjaro-gnome-assets manjaro-gdm-branding',
    'grep -q \'@define-color theme_selected_bg_color\' ~/.config/gtk-3.0/gtk.css || cp /usr/share/gtk-3.0/gtk.css ~/.config/gtk-3.0/gtk.css']
    for cmd in commands:
        subprocess.run(cmd, shell=True)

def enable_wayland():
    commands = ['pkexec sed -i "s/^WaylandEnable=false/#WaylandEnable=false/" /etc/gdm/custom.conf']
    for cmd in commands:
        subprocess.run(cmd, shell=True)

def disable_wayland():
    commands = ['pkexec sed -i "s/^#WaylandEnable=false/WaylandEnable=false/" /etc/gdm/custom.conf']
    for cmd in commands:
        subprocess.run(cmd, shell=True)

def set_highlight_color(new_color):
    # If not present, copy the file from default
    if not Path.is_file(css_file):
        copyfile('/usr/share/gtk-3.0/gtk.css', css_file)
    # Find the current highlight color
    try:
        with open(css_file) as f:
            file = f.read()
            current_color = re.search("^@define-color.*theme_selected_bg_color.*#(.*)", file)
            current_color = current_color.group(0)[38:-1]
            # Replace the old color with new one
        with open(css_file) as f:
            newText=f.read().replace(current_color, new_color, 2)
        # Write the changes
        with open(css_file, "w") as f:
            f.write(newText)
    except FileNotFoundError:
        print('Cannot set color, gtk.css not found')

class HeaderBarWindow(Gtk.Window):

    def __init__(self):
        self.layout = 'manjaro'
        Gtk.Window.__init__(self, title="Gnome Layout Switcher")
        self.set_border_width(1)
        # self.set_default_size(300, 300)

        hb = Gtk.HeaderBar()
        hb.set_show_close_button(True)
        hb.props.title = "Layout Switcher"
        self.set_titlebar(hb)

        # Stack settings
        stack = Gtk.Stack()
        stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        stack.set_transition_duration(300)
        stack.set_hhomogeneous(False)
        stack.set_vhomogeneous(False)
        stack.set_vexpand(True)
        stack.props.valign = Gtk.Align.START

        self.create_page_layout(stack)
        self.create_page_theme(stack)

    def create_page_layout(self, stack):
        # Layout menu
        vbox = Gtk.Grid(row_homogeneous=False, column_homogeneous=False, row_spacing=0, margin_left=0, margin_right=0, margin_bottom=1, margin_top=0)
        self.add(vbox)
        vbox.attach(stack, 1, 1, 1, 3)
        radiobox = Gtk.Grid(column_spacing=45, row_spacing=15, margin_left=10, margin_right=10, margin_bottom=0, margin_top=15)
        radiobox.set_hexpand(True)
        radiobox.props.halign = Gtk.Align.CENTER
        self.btn_layout_first = None
        for layout in layouts:
            self.create_layout_btn(layout=layout, the_grid=radiobox)
                # A button to apply the settings
        applybutton = Gtk.Button.new_with_label("Apply")
        applybutton.connect("clicked", self.on_layoutapply_clicked)
        radiobox.attach(applybutton, 1, 6, 2, 1)
        applybutton.props.valign = Gtk.Align.END

        stack.add_titled(radiobox, "radiobox", "Layout")
        stack.props.margin_bottom = 0
        stack_switcher = Gtk.StackSwitcher()
        stack_switcher.set_stack(stack)
        stack_switcher.set_hexpand(True)
        stack_switcher.props.halign = Gtk.Align.CENTER
        vbox.attach(stack_switcher, 1, 0, 1, 1)

    def create_page_theme(self, stack):
        ## The theme tab
        theme_grid = Gtk.Grid(row_spacing=20, margin_left=40, margin_right=40, margin_bottom=0, margin_top=15)
        theme_grid.set_hexpand(False)
        theme_grid.props.valign = Gtk.Align.START
        theme_grid.set_vexpand(True)
        stack.add_titled(theme_grid, "theme_grid", "Theme")

        # Manjaro branding toggle
        manjaro_switch = Gtk.Switch()
        branding_enabled = subprocess.run('pacman -Qq manjaro-gnome-assets &>/dev/null', shell=True)
        if branding_enabled.returncode == 0:
            manjaro_switch.set_active(True)
        else:
            manjaro_switch.set_active(False)
        manjaro_switch.connect("notify::active", self.on_branding_activated)
        manjaro_label = Gtk.Label()
        manjaro_label.set_markup("        Manjaro branding")
        manjaro_label.props.halign = Gtk.Align.START

        # wayland toggle
        wayland_switch = Gtk.Switch()
        wayland_enabled = subprocess.run('grep -q "^WaylandEnable=false" /etc/gdm/custom.conf', shell=True)
        if wayland_enabled.returncode == 1:
            wayland_switch.set_active(True)
        else:
            wayland_switch.set_active(False)
        wayland_switch.connect("notify::active", self.on_wayland_activated)
        wayland_label = Gtk.Label()
        wayland_label.set_markup("        Wayland session")
        wayland_label.props.halign = Gtk.Align.START

        theme_button = Gtk.Button.new_with_label("Open")
        theme_button.connect("clicked", self.on_gnometweaks_activated)
        theme_label = Gtk.Label()
        theme_label.set_markup("        Theme settings")
        theme_label.props.halign = Gtk.Align.START

        # Color picker
        self.color_button = Gtk.ColorButton()
        # with a default color (blue, in this instance)
        if Path.is_file(css_file):
            with open(css_file) as f:
                file = f.read()
                current_color = re.search("^@define-color.*theme_selected_bg_color.*#(.*)", file)
                current_color = current_color.group(0)[38:-1]
        else:
            current_color = '#16a085'
        color = Gdk.RGBA()
        color.parse(current_color)
        color.to_string()
        self.color_button.set_rgba(color)

        color_label = Gtk.Label()
        color_label.set_markup("        Application highlight color")
        color_label.props.halign = Gtk.Align.START
        # choosing a color in the dialogue window emits a signal
        self.color_button.connect("color-set", self.on_color_chosen)

        # Theme tab layout
        theme_grid.attach(theme_button, 1, 0, 1, 1)
        theme_grid.attach(theme_label, 3, 0, 2, 1)
        theme_grid.attach(manjaro_switch, 1, 1, 1, 1)
        theme_grid.attach(manjaro_label, 3, 1, 2, 1)
        theme_grid.attach(wayland_switch, 1, 2, 1, 1)
        theme_grid.attach(wayland_label, 3, 2, 2, 1)
        theme_grid.attach(self.color_button, 1, 3, 1, 1)
        theme_grid.attach(color_label, 3, 3, 2, 1)

    def create_layout_btn(self, layout, the_grid):
        """ Create desktop element in grid """
        btn = Gtk.RadioButton.new_with_label_from_widget(self.btn_layout_first, layout['label'])
        if not self.btn_layout_first:
            self.btn_layout_first = btn
        btn.connect("toggled", self.on_layout_toggled, layout['id'])
        the_grid.attach(btn, layout['x'], layout['y'], 1, 1)
        # Set preview images
        resDirectory = Path(__file__).parent / "../data"   # only if we use git, path exists
        if not resDirectory.resolve().exists():
            resDirectory = '/usr/share/gls'    # use installed dir by pacman
        preview_img = Gtk.Image()
        preview_img.set_from_file(f"{resDirectory}/pictures/{layout['id']}preview.png")
        btn.image = preview_img  # link img to checkbox for easy find
        # reduce opacity of de-selected previews
        if btn.get_active():
            preview_img.set_opacity(1)
        else:
            preview_img.set_opacity(0.65)
        # make preview images clickable
        event_img = Gtk.EventBox()
        event_img.connect("button-release-event", self.on_click_img)  # click in box
        event_img.connect("enter-notify-event", self.on_over_img, True)  # mouse over box
        event_img.connect("leave-notify-event", self.on_over_img, False)  # mouse out box
        event_img.add(preview_img)    # add img in box
        event_img.btn = btn    # link btn to box for easy find
        the_grid.attach(event_img, layout['x'], layout['y']+1, 1, 1) # add box and not img in grid

    # placeholder functions
    def on_layout_toggled(self, button, name):
        state = Opacity.LOW
        if button.get_active():
            state = Opacity.TOP
            self.layout = name
            print('active layout:', self.layout)
        button.image.set_opacity(state)    # change img opacity from state

    def on_over_img(self, box, event, isOverImage):
        """on mouse over / out : change opacity"""
        if box.btn.get_active():
            return
        if isOverImage:
            box.btn.image.set_opacity(Opacity.MIDDLE)
        else:
            box.btn.image.set_opacity(Opacity.LOW)

    def on_color_chosen(self, user_data):
        col = self.color_button.get_rgba().to_string()[4:-1:]
        # convert color to hexadecimal
        col = col.split(',')
        col = ( int(x) for x in col )
        col = '#%02x%02x%02x' % tuple(col)
        set_highlight_color(col)

    def on_wayland_activated(self, switch, gparam):
        if switch.get_active():
            state = "on"
            enable_wayland()
        else:
            state = "off"
            disable_wayland()
        print("Wayland was turned", state)

    def on_branding_activated(self, switch, gparam):
        if switch.get_active():
            state = "on"
            rebrand()
        else:
            state = "off"
            rm_brand()
        print("Branding was turned", state)

    def on_gnometweaks_activated(self, button):
        subprocess.run('gnome-tweaks &', shell=True)

    # Make images clickable
    def on_click_img(self, box, event):
        box.btn.set_active(True) # change checkbox state and call on_layout_toggled()

    def on_layoutapply_clicked(self, button):
        commands = {
            'manjaro': (
                'gsettings set org.gnome.shell enabled-extensions "[\'dash-to-dock@micxgx.gmail.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'drive-menu@gnome-shell-extensions.gcampax.github.com\', \'appindicatorsupport@rgcjonas.gmail.com\', \'pamac-updates@manjaro.org\', \'arc-menu@linxgem33.com\']"',
                'gsettings set org.gnome.shell.extensions.dash-to-dock dock-position LEFT',
                'gsettings set org.gnome.shell.extensions.dash-to-dock extend-height true',
                'gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed true',
                'gsettings set org.gnome.shell.extensions.arc-menu menu-button-text "Custom_Text"',
                'gsettings set org.gnome.shell.extensions.arc-menu custom-menu-button-text " Menu"',
                'gsettings set org.gnome.desktop.wm.preferences button-layout ":minimize,maximize,close"',
            ),
            'win': (
                'gsettings set org.gnome.shell enabled-extensions "[\'dash-to-panel@jderose9.github.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'appindicatorsupport@rgcjonas.gmail.com\', \'pamac-updates@manjaro.org\', \'arc-menu@linxgem33.com\']"',
                'gsettings --schemadir /usr/share/gnome-shell/extensions/dash-to-panel@jderose9.github.com/schemas set org.gnome.shell.extensions.dash-to-panel show-show-apps-button false',
                'gsettings set org.gnome.shell.extensions.arc-menu menu-button-text "Custom_Text"',
                'gsettings set org.gnome.shell.extensions.arc-menu custom-menu-button-text " "',
                'gsettings set org.gnome.desktop.wm.preferences button-layout ":minimize,maximize,close"'
            ),
            'mac' : (
                'gsettings set org.gnome.shell enabled-extensions "[\'dash-to-dock@micxgx.gmail.com\', \'user-theme@gnome-shell-extensions.gcampax.github.com\', \'unite@hardpixel.eu\', \'pamac-updates@manjaro.org\']"',
                'gsettings set org.gnome.shell.extensions.dash-to-dock dock-position BOTTOM',
                'gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false',
                'gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed false',
                'gsettings set org.gnome.desktop.wm.preferences button-layout "close,minimize,maximize:"'
            ),
            'gnome' : (
                'gsettings set org.gnome.shell enabled-extensions "[\'pamac-updates@manjaro.org\', \'user-theme@gnome-shell-extensions.gcampax.github.com\']"',
                'gsettings set org.gnome.desktop.wm.preferences button-layout ":minimize,maximize,close"'
            )
        }

        for cmd in commands.get(self.layout, ""):
            subprocess.run(cmd, shell=True)
        print("Layout applied")




# Show the window        
win = HeaderBarWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
